#Use this file to list modules and versions-- ---
-- Globals
-- ---

-- SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
-- SET FOREIGN_KEY_CHECKS=0;


*********************************************************************
********************   CREATE TABLES (SCHEMAS)  *********************
*********************************************************************
cursor.execute('''
DROP TABLE IF EXISTS user;
CREATE TABLE user (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, 
username VARCHAR(128), 
password VARCHAR(128)
);''')


cursor.execute('''
DROP TABLE IF EXISTS price;
CREATE TABLE price (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
ticker_id INTEGER NOT NULL,
ticker VARCHAR(128) NOT NULL,
date VARCHAR(128) NOT NULL,
open FLOAT NULL,
high FLOAT NULL,
low FLOAT NULL,
close FLOAT NULL,
volume FLOAT NULL,
ex_dividend FLOAT NULL,
split_ratio FLOAT NULL,
adj_open FLOAT NULL,
adj_high FLOAT NULL,
adj_low FLOAT NULL,
adj_close FLOAT NULL,
adj_volume FLOAT NULL
);''')


cursor.execute('''
DROP TABLE IF EXISTS ticker;
CREATE TABLE ticker (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
symbol VARCHAR(128) NOT NULL
);''')


cursor.execute('''
DROP TABLE IF EXISTS fundamental;
CREATE TABLE fundamental (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
ticker_id INTEGER NOT NULL,
ticker VARCHAR(128) NOT NULL,
date VARCHAR(128) NOT NULL,
value FLOAT NULL,
indicator VARCHAR(128) NOT NULL,
dimension VARCHAR(128) NULL
);''')


cursor.execute('''
ALTER TABLE price ADD FOREIGN KEY (ticker_id) REFERENCES ticker (id);
ALTER TABLE fundamental ADD FOREIGN KEY (ticker_id) REFERENCES ticker (id);
ALTER TABLE user ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE price ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE ticker ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE fundamental ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
''')




*********************************************************************
***************   DON'T USE THESE TABLES (SCHEMAS)  *****************
*********************************************************************

DROP TABLE IF EXISTS `user`;
		
CREATE TABLE `user` (
  `id` INTEGER NOT NULL AUTO_INCREMENT DEFAULT NOT NULL,
  `username` VARCHAR(128) NULL DEFAULT 'NOT NULL',
  `password` VARCHAR(128) NOT NULL DEFAULT 'NOT NULL',
  PRIMARY KEY (`id`)
);

-- ---
-- Table 'price'
-- 
-- ---

DROP TABLE IF EXISTS `price`;
		
CREATE TABLE `price` (
  `id` INTEGER NOT NULL AUTO_INCREMENT DEFAULT NULL,
  `ticker_id` INTEGER NOT NULL DEFAULT NOT NULL,
  `ticker` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `date` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `open` FLOAT NULL DEFAULT NULL,
  `high` FLOAT NULL DEFAULT NULL,
  `low` FLOAT NULL DEFAULT NULL,
  `close` FLOAT NULL DEFAULT NULL,
  `volume` FLOAT NULL DEFAULT NULL,
  `ex_dividend` FLOAT NULL DEFAULT NULL,
  `split_ratio` FLOAT NULL DEFAULT NULL,
  `adj_open` FLOAT NULL DEFAULT NULL,
  `adj_high` INTEGER NULL DEFAULT NULL,
  `adj_low` INTEGER NULL DEFAULT NULL,
  `adj_close` FLOAT NULL DEFAULT NULL,
  `adj_volume` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
);

-- ---
-- Table 'ticker'
-- 
-- ---

DROP TABLE IF EXISTS `ticker`;
		
CREATE TABLE `ticker` (
  `id` INTEGER NOT NULL AUTO_INCREMENT DEFAULT NULL,
  `symbol` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  PRIMARY KEY (`id`)
);

-- ---
-- Table 'fundamental'
-- 
-- ---

DROP TABLE IF EXISTS `fundamental`;
		
CREATE TABLE `fundamental` (
  `id` INTEGER NULL AUTO_INCREMENT DEFAULT NULL,
  `ticker_id` INTEGER NOT NULL DEFAULT NULL,
  `ticker` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `date` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `value` DECIMAL NULL DEFAULT NULL,
  `indicator` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `dimension` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
);

-- ---
-- Foreign Keys 
-- ---

ALTER TABLE `price` ADD FOREIGN KEY (ticker_id) REFERENCES `ticker` (`id`);
ALTER TABLE `fundamental` ADD FOREIGN KEY (ticker_id) REFERENCES `ticker` (`id`);

-- ---
-- Table Properties
-- ---


-- ALTER TABLE `user` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `price` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `ticker` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `fundamental` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;


-- ---
-- Test Data
-- ---

-- INSERT INTO `user` (`id`,`username`,`password`) VALUES
-- ('','','');
-- INSERT INTO `price` (`id`,`ticker_id`,`ticker`,`date`,`open`,`high`,`low`,`close`,`volume`,`ex_dividend`,`split_ratio`,`adj_open`,`adj_high`,`adj_low`,`adj_close`,`adj_volume`) VALUES
-- ('','','','','','','','','','','','','','','','');
-- INSERT INTO `ticker` (`id`,`symbol`) VALUES
-- ('','');
-- INSERT INTO `fundamental` (`id`,`ticker_id`,`ticker`,`date`,`value`,`indicator`,`dimension`) VALUES
-- ('','','','','','','');


***************************************************************************
*********************    GET LIST OF TRADING DATES    *********************
***************************************************************************
select distinct date from price where date > 2007-01-01;


***************************************************************************
********************    GET SYMBOL BASED ON CURRENT RATIO    **************
***************************************************************************
#select fundamental.ticker from fundamental where fundamental.indicator = 'CURRENTRATIO' and fundamental.value > 2.0 and date > '2017-01-01';


***************************************************************************
**********************    GET DISTINCT INDICATORS    **********************
***************************************************************************
#select fundamental.ticker from fundamental where fundamental.indicator = 'CURRENTRATIO' and fundamental.value > 2.0 and date > '2017-01-01';

***************************************************************************
***************************    CREATE INDEX    ****************************
***************************************************************************
CREATE FULLTEXT INDEX indicator_idx ON fundamental(indicator);


***************************************************************************
**************************    ADD PARTITIONS    ***************************
***************************************************************************
USE trading_algo;
ALTER TABLE fundamental 
PARTITION BY LIST(indicator) (
  PARTITION pCURRENTRATIO VALUES IN ('CURRENTRATIO'),
  PARTITION pDE VALUES IN ('DE'),
  PARTITION pBVPS VALUES IN ('BVPS'),
  PARTITION pEPS VALUES IN ('EPS'),
  PARTITION pDIVYIELD VALUES IN ('DIVYIELD'),
  PARTITION pPE1 VALUES IN ('PE1'),
  PARTITION pPB VALUES IN ('PB'),
  PARTITION pROIC VALUES IN ('ROIC'),
  PARTITION pROE VALUES IN ('ROE),
  PARTITION pNETMARGIN VALUES IN ('NETMARGIN'),
  PARTITION pFCF VALUES IN ('FCF'),
  PARTITION pPS VALUES IN ('PS'),
  PARTITION pROA VALUES IN ('ROA'),
  PARTITION pTANGIBLES VALUES IN ('TANGIBLES'),
  PARTITION pROS VALUES IN ('ROS'),
  PARTITION pWORKINGCAPITAL VALUES IN ('WORKINGCAPITAL'),
  PARTITION pMARKETCAP VALUES IN ('MARKETCAP'),
  PARTITION pFCFPS VALUES IN ('FCFPS'),
);


***************************************************************************
************  STORED PROCEDURE TO GET TICKER BY CURRENT RATIO  ************
***************************************************************************

USE `trading_algo`;
DROP procedure IF EXISTS `sp_getTickerWithCR`;

DELIMITER $$
USE `trading_algo`$$
CREATE PROCEDURE `sp_getTickerWithCR` ()
BEGIN
	select distinct fundamental.ticker from fundamental where fundamental.indicator = 'CURRENTRATIO' and fundamental.value > 2.0 and date > '2017-01-01';
END$$

DELIMITER ;



***************************************************************************
***********  Sample from twitter file  ***********
***************************************************************************

USE `trading_algo`;
DROP procedure IF EXISTS `sp_getTickerCR`;
 
DELIMITER $$
USE `trading_algo`$$
CREATE PROCEDURE `sp_getTickerCR` (
IN p_user_id BIGINT
)
BEGIN
    select * from posts where user_id = p_user_id;
END$$

DELIMITER ;











