#Use this file to list modules and versions-- ---
-- Globals
-- ---

-- SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
-- SET FOREIGN_KEY_CHECKS=0;


*********************************************************************
********************   CREATE TABLES (SCHEMAS)  *********************
*********************************************************************
cursor.execute('''
DROP TABLE IF EXISTS user;
CREATE TABLE user (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT, 
username VARCHAR(128), 
password VARCHAR(128)
);''')


cursor.execute('''
DROP TABLE IF EXISTS price;
CREATE TABLE price (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
ticker_id INTEGER NOT NULL,
ticker VARCHAR(128) NOT NULL,
date VARCHAR(128) NOT NULL,
open FLOAT NULL,
high FLOAT NULL,
low FLOAT NULL,
close FLOAT NULL,
volume FLOAT NULL,
ex_dividend FLOAT NULL,
split_ratio FLOAT NULL,
adj_open FLOAT NULL,
adj_high FLOAT NULL,
adj_low FLOAT NULL,
adj_close FLOAT NULL,
adj_volume FLOAT NULL
);''')


cursor.execute('''
DROP TABLE IF EXISTS ticker;
CREATE TABLE ticker (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
symbol VARCHAR(128) NOT NULL
);''')


cursor.execute('''
DROP TABLE IF EXISTS fundamental;
CREATE TABLE fundamental (
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
ticker_id INTEGER NOT NULL,
ticker VARCHAR(128) NOT NULL,
date VARCHAR(128) NOT NULL,
value FLOAT NULL,
indicator VARCHAR(128) NOT NULL,
dimension VARCHAR(128) NULL
);''')


cursor.execute('''
SET foreign_key_checks = 0;
DROP TABLE IF EXISTS filtered;
SET foreign_key_checks = 1;
CREATE TABLE filtered ( 
date VARCHAR(128) NOT NULL,
ticker_id INTEGER NOT NULL
);''')


cursor.execute('''
SET foreign_key_checks = 0;
DROP TABLE IF EXISTS porfolio;
SET foreign_key_checks = 1;
CREATE TABLE porfolio ( 
ticker_id INTEGER NOT NULL,
date_purchased VARCHAR(128) NOT NULL,
value_purchased FLOAT NULL,
date_sold VARCHAR(128) NOT NULL,
value_sold FLOAT NULL
);''')


cursor.execute('''
ALTER TABLE price ADD FOREIGN KEY (ticker_id) REFERENCES ticker (id);
ALTER TABLE fundamental ADD FOREIGN KEY (ticker_id) REFERENCES ticker (id);
ALTER TABLE user ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE price ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE ticker ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
ALTER TABLE fundamental ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
''')




*********************************************************************
***************   DON'T USE THESE TABLES (SCHEMAS)  *****************
*********************************************************************

DROP TABLE IF EXISTS `user`;
		
CREATE TABLE `user` (
  `id` INTEGER NOT NULL AUTO_INCREMENT DEFAULT NOT NULL,
  `username` VARCHAR(128) NULL DEFAULT 'NOT NULL',
  `password` VARCHAR(128) NOT NULL DEFAULT 'NOT NULL',
  PRIMARY KEY (`id`)
);

-- ---
-- Table 'price'
-- 
-- ---

DROP TABLE IF EXISTS `price`;
		
CREATE TABLE `price` (
  `id` INTEGER NOT NULL AUTO_INCREMENT DEFAULT NULL,
  `ticker_id` INTEGER NOT NULL DEFAULT NOT NULL,
  `ticker` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `date` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `open` FLOAT NULL DEFAULT NULL,
  `high` FLOAT NULL DEFAULT NULL,
  `low` FLOAT NULL DEFAULT NULL,
  `close` FLOAT NULL DEFAULT NULL,
  `volume` FLOAT NULL DEFAULT NULL,
  `ex_dividend` FLOAT NULL DEFAULT NULL,
  `split_ratio` FLOAT NULL DEFAULT NULL,
  `adj_open` FLOAT NULL DEFAULT NULL,
  `adj_high` INTEGER NULL DEFAULT NULL,
  `adj_low` INTEGER NULL DEFAULT NULL,
  `adj_close` FLOAT NULL DEFAULT NULL,
  `adj_volume` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
);

-- ---
-- Table 'ticker'
-- 
-- ---

DROP TABLE IF EXISTS `ticker`;
		
CREATE TABLE `ticker` (
  `id` INTEGER NOT NULL AUTO_INCREMENT DEFAULT NULL,
  `symbol` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  PRIMARY KEY (`id`)
);

-- ---
-- Table 'fundamental'
-- 
-- ---

DROP TABLE IF EXISTS `fundamental`;
		
CREATE TABLE `fundamental` (
  `id` INTEGER NULL AUTO_INCREMENT DEFAULT NULL,
  `ticker_id` INTEGER NOT NULL DEFAULT NULL,
  `ticker` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `date` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `value` DECIMAL NULL DEFAULT NULL,
  `indicator` VARCHAR(128) NOT NULL DEFAULT 'NULL',
  `dimension` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
);

-- ---
-- Foreign Keys 
-- ---

ALTER TABLE `price` ADD FOREIGN KEY (ticker_id) REFERENCES `ticker` (`id`);
ALTER TABLE `fundamental` ADD FOREIGN KEY (ticker_id) REFERENCES `ticker` (`id`);

-- ---
-- Table Properties
-- ---


-- ALTER TABLE `user` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `price` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `ticker` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
-- ALTER TABLE `fundamental` ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;


-- ---
-- Test Data
-- ---

-- INSERT INTO `user` (`id`,`username`,`password`) VALUES
-- ('','','');
-- INSERT INTO `price` (`id`,`ticker_id`,`ticker`,`date`,`open`,`high`,`low`,`close`,`volume`,`ex_dividend`,`split_ratio`,`adj_open`,`adj_high`,`adj_low`,`adj_close`,`adj_volume`) VALUES
-- ('','','','','','','','','','','','','','','','');
-- INSERT INTO `ticker` (`id`,`symbol`) VALUES
-- ('','');
-- INSERT INTO `fundamental` (`id`,`ticker_id`,`ticker`,`date`,`value`,`indicator`,`dimension`) VALUES
-- ('','','','','','','');


***************************************************************************
*********************    GET LIST OF TRADING DATES    *********************
***************************************************************************
select distinct date from price where date > 2007-01-01;


***************************************************************************
*************    GET UNIQUE SYMBOLS BASED ON CURRENT RATIO    *************
***************************************************************************
select distinct fundamental.ticker_id from fundamental partition (pCURRENTRATIO) where fundamental.value > 5.0 and fundamental.date > '2016-03-15' and fundamental.date < '2016-06-15';


***************************************************************************
**********************    GET DISTINCT INDICATORS    **********************
***************************************************************************
#select distinct fundamental.ticker from fundamental where fundamental.indicator = 'CURRENTRATIO' and fundamental.value > 2.0 and date > '2017-01-01';

***************************************************************************
***************************    CREATE INDEX    ****************************
***************************************************************************
CREATE FULLTEXT INDEX indicator_idx ON fundamental(indicator);


***************************************************************************
*************    CREATE PARTITIONS FOR FUNDAMENTAL TABLE    ***************
***************************************************************************
USE trading_algo;
CREATE TABLE fundamental (
  ticker_id INTEGER NOT NULL,
  date VARCHAR(128) NOT NULL,
  value FLOAT NULL,
  indicator VARCHAR(128) NOT NULL,
  dimension VARCHAR(128) NULL
)
PARTITION BY LIST COLUMNS(indicator) (
  PARTITION pACCOCI VALUES IN('ACCOCI'),
  PARTITION pASSETS VALUES IN('ASSETS'),
  PARTITION pASSETSAVG VALUES IN('ASSETSAVG'),
  PARTITION pASSETSC VALUES IN('ASSETSC'),
  PARTITION pASSETSNC VALUES IN('ASSETSNC'),
  PARTITION pASSETTURNOVER VALUES IN('ASSETTURNOVER'),
  PARTITION pBVPS VALUES IN('BVPS'),
  PARTITION pCALENDARDATE VALUES IN('CALENDARDATE'),
  PARTITION pCAPEX VALUES IN('CAPEX'),
  PARTITION pCASHNEQ VALUES IN('CASHNEQ'),
  PARTITION pCASHNEQUSD VALUES IN('CASHNEQUSD'),
  PARTITION pCONSOLINC VALUES IN('CONSOLINC'),
  PARTITION pCOR VALUES IN('COR'),
  PARTITION pCURRENTRATIO VALUES IN('CURRENTRATIO'),
  PARTITION pDATEKEY VALUES IN('DATEKEY'),
  PARTITION pDE VALUES IN('DE'),
  PARTITION pDEBT VALUES IN('DEBT'),
  PARTITION pDEBTC VALUES IN('DEBTC'),
  PARTITION pDEBTNC VALUES IN('DEBTNC'),
  PARTITION pDEBTUSD VALUES IN('DEBTUSD'),
  PARTITION pDEFERREDREV VALUES IN('DEFERREDREV'),
  PARTITION pDEPAMOR VALUES IN('DEPAMOR'),
  PARTITION pDEPOSITS VALUES IN('DEPOSITS'),
  PARTITION pDILUTIONRATIO VALUES IN('DILUTIONRATIO'),
  PARTITION pDIMENSION VALUES IN('DIMENSION'),
  PARTITION pDIVYIELD VALUES IN('DIVYIELD'),
  PARTITION pDPS VALUES IN('DPS'),
  PARTITION pEBIT VALUES IN('EBIT'),
  PARTITION pEBITDA VALUES IN('EBITDA'),
  PARTITION pEBITDAMARGIN VALUES IN('EBITDAMARGIN'),
  PARTITION pEBITDAUSD VALUES IN('EBITDAUSD'),
  PARTITION pEBITUSD VALUES IN('EBITUSD'),
  PARTITION pEBT VALUES IN('EBT'),
  PARTITION pEPS VALUES IN('EPS'),
  PARTITION pEPSDIL VALUES IN('EPSDIL'),
  PARTITION pEPSDILGROWTH1YR VALUES IN('EPSDILGROWTH1YR'),
  PARTITION pEPSGROWTH1YR VALUES IN('EPSGROWTH1YR'),
  PARTITION pEPSUSD VALUES IN('EPSUSD'),
  PARTITION pEQUITY VALUES IN('EQUITY'),
  PARTITION pEQUITYAVG VALUES IN('EQUITYAVG'),
  PARTITION pEQUITYUSD VALUES IN('EQUITYUSD'),
  PARTITION pEV VALUES IN('EV'),
  PARTITION pEVEBIT VALUES IN('EVEBIT'),
  PARTITION pEVEBITDA VALUES IN('EVEBITDA'),
  PARTITION pEVENT VALUES IN('EVENT'),
  PARTITION pFCF VALUES IN('FCF'),
  PARTITION pFCFPS VALUES IN('FCFPS'),
  PARTITION pFILINGDATE VALUES IN('FILINGDATE'),
  PARTITION pFILINGTYPE VALUES IN('FILINGTYPE'),
  PARTITION pFXUSD VALUES IN('FXUSD'),
  PARTITION pGP VALUES IN('GP'),
  PARTITION pGROSSMARGIN VALUES IN('GROSSMARGIN'),
  PARTITION pINTANGIBLES VALUES IN('INTANGIBLES'),
  PARTITION pINTERESTBURDEN VALUES IN('INTERESTBURDEN'),
  PARTITION pINTEXP VALUES IN('INTEXP'),
  PARTITION pINVCAP VALUES IN('INVCAP'),
  PARTITION pINVCAPAVG VALUES IN('INVCAPAVG'),
  PARTITION pINVENTORY VALUES IN('INVENTORY'),
  PARTITION pINVESTMENTS VALUES IN('INVESTMENTS'),
  PARTITION pINVESTMENTSC VALUES IN('INVESTMENTSC'),
  PARTITION pINVESTMENTSNC VALUES IN('INVESTMENTSNC'),
  PARTITION pLASTUPDATED VALUES IN('LASTUPDATED'),
  PARTITION pLEVERAGERATIO VALUES IN('LEVERAGERATIO'),
  PARTITION pLIABILITIES VALUES IN('LIABILITIES'),
  PARTITION pLIABILITIESC VALUES IN('LIABILITIESC'),
  PARTITION pLIABILITIESNC VALUES IN('LIABILITIESNC'),
  PARTITION pMARKETCAP VALUES IN('MARKETCAP'),
  PARTITION pNCF VALUES IN('NCF'),
  PARTITION pNCFBUS VALUES IN('NCFBUS'),
  PARTITION pNCFCOMMON VALUES IN('NCFCOMMON'),
  PARTITION pNCFDEBT VALUES IN('NCFDEBT'),
  PARTITION pNCFDIV VALUES IN('NCFDIV'),
  PARTITION pNCFF VALUES IN('NCFF'),
  PARTITION pNCFI VALUES IN('NCFI'),
  PARTITION pNCFINV VALUES IN('NCFINV'),
  PARTITION pNCFO VALUES IN('NCFO'),
  PARTITION pNCFOGROWTH1YR VALUES IN('NCFOGROWTH1YR'),
  PARTITION pNCFX VALUES IN('NCFX'),
  PARTITION pNETINC VALUES IN('NETINC'),
  PARTITION pNETINCCMN VALUES IN('NETINCCMN'),
  PARTITION pNETINCCMNUSD VALUES IN('NETINCCMNUSD'),
  PARTITION pNETINCDIS VALUES IN('NETINCDIS'),
  PARTITION pNETINCGROWTH1YR VALUES IN('NETINCGROWTH1YR'),
  PARTITION pNETINCNCI VALUES IN('NETINCNCI'),
  PARTITION pNETMARGIN VALUES IN('NETMARGIN'),
  PARTITION pOPEX VALUES IN('OPEX'),
  PARTITION pOPINC VALUES IN('OPINC'),
  PARTITION pPAYABLES VALUES IN('PAYABLES'),
  PARTITION pPAYOUTRATIO VALUES IN('PAYOUTRATIO'),
  PARTITION pPB VALUES IN('PB'),
  PARTITION pPE VALUES IN('PE'),
  PARTITION pPE1 VALUES IN('PE1'),
  PARTITION pPPNENET VALUES IN('PPNENET'),
  PARTITION pPREFDIVIS VALUES IN('PREFDIVIS'),
  PARTITION pPRICE VALUES IN('PRICE'),
  PARTITION pPS VALUES IN('PS'),
  PARTITION pPS1 VALUES IN('PS1'),
  PARTITION pRECEIVABLES VALUES IN('RECEIVABLES'),
  PARTITION pREPORTPERIOD VALUES IN('REPORTPERIOD'),
  PARTITION pRETEARN VALUES IN('RETEARN'),
  PARTITION pREVENUE VALUES IN('REVENUE'),
  PARTITION pREVENUEGROWTH1YR VALUES IN('REVENUEGROWTH1YR'),
  PARTITION pREVENUEUSD VALUES IN('REVENUEUSD'),
  PARTITION pRND VALUES IN('RND'),
  PARTITION pROA VALUES IN('ROA'),
  PARTITION pROE VALUES IN('ROE'),
  PARTITION pROIC VALUES IN('ROIC'),
  PARTITION pROS VALUES IN('ROS'),
  PARTITION pSBCOMP VALUES IN('SBCOMP'),
  PARTITION pSGNA VALUES IN('SGNA'),
  PARTITION pSHAREFACTOR VALUES IN('SHAREFACTOR'),
  PARTITION pSHARESBAS VALUES IN('SHARESBAS'),
  PARTITION pSHARESWA VALUES IN('SHARESWA'),
  PARTITION pSHARESWADIL VALUES IN('SHARESWADIL'),
  PARTITION pSHARESWAGROWTH1YR VALUES IN('SHARESWAGROWTH1YR'),
  PARTITION pSPS VALUES IN('SPS'),
  PARTITION pTANGIBLES VALUES IN('TANGIBLES'),
  PARTITION pTAXASSETS VALUES IN('TAXASSETS'),
  PARTITION pTAXEFFICIENCY VALUES IN('TAXEFFICIENCY'),
  PARTITION pTAXEXP VALUES IN('TAXEXP'),
  PARTITION pTAXLIABILITIES VALUES IN('TAXLIABILITIES'),
  PARTITION pTBVPS VALUES IN('TBVPS'),
  PARTITION pTICKER VALUES IN('TICKER'),
  PARTITION pWORKINGCAPITAL VALUES IN('WORKINGCAPITAL')
);


***************************************************************************
****************    CREATE PRICE TABLE WITH PARTITIONS    ******************
***************************************************************************
USE trading_algo;
DROP TABLE IF EXISTS price;
CREATE TABLE price (
  ticker_id INTEGER NOT NULL,
  date VARCHAR(128) NOT NULL,
  adj_close FLOAT NULL,
  adj_volume FLOAT NULL
)
PARTITION BY RANGE COLUMNS(date) (
  PARTITION pLESSTHAN1990 VALUES LESS THAN ('1989-12-31'),
  PARTITION pLESSTHAN2000 VALUES LESS THAN ('1999-12-31'),
  PARTITION pLESSTHAN2005 VALUES LESS THAN ('2004-12-31'),
  PARTITION pLESSTHAN2006 VALUES LESS THAN ('2005-12-31'),
  PARTITION pLESSTHAN2007 VALUES LESS THAN ('2006-12-31'),
  PARTITION pLESSTHAN2008 VALUES LESS THAN ('2007-12-31'),
  PARTITION pLESSTHAN2009 VALUES LESS THAN ('2008-12-31'),
  PARTITION pLESSTHAN2010 VALUES LESS THAN ('2009-12-31'),
  PARTITION pLESSTHAN2011 VALUES LESS THAN ('2010-12-31'),
  PARTITION pLESSTHAN2012 VALUES LESS THAN ('2011-12-31'),
  PARTITION pLESSTHAN2013 VALUES LESS THAN ('2012-12-31'),
  PARTITION pLESSTHAN2014 VALUES LESS THAN ('2013-12-31'),
  PARTITION pLESSTHAN2015 VALUES LESS THAN ('2014-12-31'),
  PARTITION pLESSTHAN2016 VALUES LESS THAN ('2015-12-31'),
  PARTITION pLESSTHAN2017 VALUES LESS THAN ('2016-12-31'),
  PARTITION pMAX VALUES LESS THAN (MAXVALUE)
);


***************************************************************************
************  STORED PROCEDURE TO GET TICKER BY CURRENT RATIO  ************
***************************************************************************

USE `trading_algo`;
DROP procedure IF EXISTS `sp_getTickerWithCR`;

DELIMITER $$
USE `trading_algo`$$
CREATE PROCEDURE `sp_getTickerWithCR` ()
BEGIN
	select distinct fundamental.ticker from fundamental where fundamental.indicator = 'CURRENTRATIO' and fundamental.value > 2.0 and date > '2017-01-01';
END$$

DELIMITER ;



***************************************************************************
***********  Sample from twitter file  ***********
***************************************************************************

USE `trading_algo`;
DROP procedure IF EXISTS `sp_getTickerCR`;
 
DELIMITER $$
USE `trading_algo`$$
CREATE PROCEDURE `sp_getTickerCR` (
IN p_user_id BIGINT
)
BEGIN
    select * from posts where user_id = p_user_id;
END$$

DELIMITER ;



***************************************************************************
***********************  BACKUP MYSQL DB WITH GZIP  ***********************
***************************************************************************

mysqldump -h localhost -u scox -p trading_algo | gzip -9 > backup-20170407-trading_algo.sql.gz



***************************************************************************
**********************  RESTORE MYSQL DB WITH GZIP  ***********************
***************************************************************************

`zcat $PATH/backup-%DATETIME%-%DATABASE_NAME%.sql.gz | mysql -h $HOSTNAME -u $EXISTING_USERNAME_NAME  -p $EXISTING_DATABASE_NAME`



***************************************************************************
********************* SQL STATEMENTS TO USE WITH ALGO *********************
***************************************************************************

select sum(buy_value) from portfolio;

update portfolio set buy_value = 15000 where ticker_id = 707;

select (1000000 + sum(sell_value) - sum(buy_value)) as Cash_Available from portfolio;

SELECT IF (1000000 - SUM(portfolio.buy_value) + SUM(portfolio.sell_value) > 20000, 20000, 1000000 - SUM(portfolio.buy_value) + SUM(portfolio.sell_value))
FROM portfolio;

select * from portfolio where ticker_id = 301 and sell_price > 0;

select datediff(sell_date, buy_date) from portfolio;

select count(gain_loss) from portfolio where gain_loss > 0;
select count(gain_loss) from portfolio where gain_loss < 0;

select avg(days_held) from portfolio where days_held > 0;
